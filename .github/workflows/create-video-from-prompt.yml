name: Create Video from Prompt

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: '動画のプロンプト（画像生成用）'
        required: true
        type: string

jobs:
  setup-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      branch-name: ${{ steps.create-branch.outputs.branch-name }}
      folder-name: ${{ steps.create-branch.outputs.folder-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create branch for video generation
        id: create-branch
        run: |
          BRANCH_NAME="video/$(date +%Y%m%d)-${{ github.run_id }}"
          FOLDER_NAME="video-$(date +%Y%m%d)-${{ github.run_id }}"
          git checkout -b $BRANCH_NAME
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git push origin $BRANCH_NAME
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "folder-name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "Created branch: $BRANCH_NAME"
          echo "Folder name: $FOLDER_NAME"

  image-generation:
    runs-on: ubuntu-latest
    needs: [setup-branch]
    permissions:
      contents: write
    outputs:
      image-completed: ${{ steps.image.outputs.completed }}
      image-url: ${{ steps.image.outputs.image-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install requests pillow
      
      - name: 画像生成 (fal.ai Imagen4 Ultra)
        id: image
        env:
          FAL_KEY: ${{ secrets.FAL_KEY }}
        run: |
          echo "::group::🎨 Image Generation with fal.ai Imagen4 Ultra"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          USER_PROMPT="${{ inputs.prompt }}"
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          IMAGES_DIR="$FOLDER_NAME/images"
          
          echo "User prompt: $USER_PROMPT"
          echo "Target folder: $IMAGES_DIR"
          
          # 画像フォルダを作成
          mkdir -p "$IMAGES_DIR"
          
          # fal.ai APIで画像生成
          python3 -c "
import requests
import json
import os
import base64
from PIL import Image
import io

# 設定
FAL_KEY = os.environ.get('FAL_KEY')
if not FAL_KEY:
    print('❌ FAL_KEY not set')
    exit(1)

USER_PROMPT = '$USER_PROMPT'
IMAGES_DIR = '$IMAGES_DIR'

# fal.ai Imagen4 Ultra API
url = 'https://fal.run/fal-ai/imagen4-ultra'
headers = {
    'Authorization': f'Key {FAL_KEY}',
    'Content-Type': 'application/json'
}

data = {
    'prompt': USER_PROMPT,
    'image_size': '1024x1024',
    'num_images': 1
}

print(f'🚀 Generating image with prompt: {USER_PROMPT}')
response = requests.post(url, headers=headers, json=data)

if response.status_code == 200:
    result = response.json()
    image_url = result['images'][0]['url']
    print(f'✅ Image generated: {image_url}')
    
    # 画像をダウンロードして保存
    img_response = requests.get(image_url)
    if img_response.status_code == 200:
        img_path = f'{IMAGES_DIR}/generated_image.png'
        with open(img_path, 'wb') as f:
            f.write(img_response.content)
        print(f'✅ Image saved: {img_path}')
        
        # GitHub Actions outputs
        print(f'image-url={image_url}')
        print(f'image-completed=true')
    else:
        print(f'❌ Failed to download image: {img_response.status_code}')
        exit(1)
else:
    print(f'❌ Image generation failed: {response.status_code}')
    print(f'Response: {response.text}')
    exit(1)
"
      
      - name: Commit and push image
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.setup-branch.outputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No image files to commit"
          else
            git commit -m "Add generated image: ${{ inputs.prompt }}"
            git push origin ${{ needs.setup-branch.outputs.branch-name }}
          fi

  video-generation:
    runs-on: ubuntu-latest
    needs: [setup-branch, image-generation]
    permissions:
      contents: write
    outputs:
      video-completed: ${{ steps.video.outputs.completed }}
      video-url: ${{ steps.video.outputs.video-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install requests pillow
      
      - name: 動画生成 (fal.ai Vidu Q1)
        id: video
        env:
          FAL_KEY: ${{ secrets.FAL_KEY }}
        run: |
          echo "::group::🎬 Video Generation with fal.ai Vidu Q1"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          USER_PROMPT="${{ inputs.prompt }}"
          IMAGE_URL="${{ needs.image-generation.outputs.image-url }}"
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          VIDEOS_DIR="$FOLDER_NAME/videos"
          
          echo "User prompt: $USER_PROMPT"
          echo "Image URL: $IMAGE_URL"
          echo "Target folder: $VIDEOS_DIR"
          
          # 動画フォルダを作成
          mkdir -p "$VIDEOS_DIR"
          
          # fal.ai APIで動画生成
          python3 -c "
import requests
import json
import os
import time

# 設定
FAL_KEY = os.environ.get('FAL_KEY')
if not FAL_KEY:
    print('❌ FAL_KEY not set')
    exit(1)

USER_PROMPT = '$USER_PROMPT'
IMAGE_URL = '$IMAGE_URL'
VIDEOS_DIR = '$VIDEOS_DIR'

# fal.ai Vidu Q1 API
url = 'https://fal.run/fal-ai/vidu-q1'
headers = {
    'Authorization': f'Key {FAL_KEY}',
    'Content-Type': 'application/json'
}

data = {
    'image_url': IMAGE_URL,
    'prompt': USER_PROMPT,
    'duration': 3.0
}

print(f'🚀 Generating video with prompt: {USER_PROMPT}')
print(f'Using image: {IMAGE_URL}')

response = requests.post(url, headers=headers, json=data)

if response.status_code == 200:
    result = response.json()
    task_id = result.get('task_id')
    print(f'✅ Video generation started, task ID: {task_id}')
    
    # 動画生成の完了を待つ
    max_attempts = 60  # 5分間
    for attempt in range(max_attempts):
        status_url = f'https://fal.run/fal-ai/vidu-q1/{task_id}'
        status_response = requests.get(status_url, headers=headers)
        
        if status_response.status_code == 200:
            status_result = status_response.json()
            status = status_result.get('status')
            
            if status == 'completed':
                video_url = status_result.get('video_url')
                print(f'✅ Video generated: {video_url}')
                
                # 動画をダウンロードして保存
                video_response = requests.get(video_url)
                if video_response.status_code == 200:
                    video_path = f'{VIDEOS_DIR}/generated_video.mp4'
                    with open(video_path, 'wb') as f:
                        f.write(video_response.content)
                    print(f'✅ Video saved: {video_path}')
                    
                    # GitHub Actions outputs
                    print(f'video-url={video_url}')
                    print(f'video-completed=true')
                    break
                else:
                    print(f'❌ Failed to download video: {video_response.status_code}')
                    exit(1)
            elif status == 'failed':
                print(f'❌ Video generation failed')
                exit(1)
            else:
                print(f'⏳ Video generation in progress... (attempt {attempt + 1}/{max_attempts})')
                time.sleep(5)
        else:
            print(f'❌ Failed to check status: {status_response.status_code}')
            exit(1)
    else:
        print(f'❌ Video generation timeout')
        exit(1)
else:
    print(f'❌ Video generation failed: {response.status_code}')
    print(f'Response: {response.text}')
    exit(1)
"
      
      - name: Commit and push video
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.setup-branch.outputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No video files to commit"
          else
            git commit -m "Add generated video: ${{ inputs.prompt }}"
            git push origin ${{ needs.setup-branch.outputs.branch-name }}
          fi

  create-pr:
    runs-on: ubuntu-latest
    needs: [setup-branch, image-generation, video-generation]
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "🎬 Generated Video: ${{ inputs.prompt }}" \
            --body "## 動画生成完了 🎉

          **プロンプト**: ${{ inputs.prompt }}

          ### 生成されたファイル:
          - 📸 画像: ${{ needs.image-generation.outputs.image-url }}
          - 🎬 動画: ${{ needs.video-generation.outputs.video-url }}

          ### フォルダ構造:
          \`\`\`
          ${{ needs.setup-branch.outputs.folder-name }}/
          ├── images/
          │   └── generated_image.png
          └── videos/
              └── generated_video.mp4
          \`\`\`

          ---
          *Generated by Kamui Code Workflow*" \
            --base main